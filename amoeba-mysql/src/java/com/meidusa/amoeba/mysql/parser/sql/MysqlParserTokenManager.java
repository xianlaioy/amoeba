/* Generated By:JJTree&JavaCC: Do not edit this line. MysqlParserTokenManager.java */
/*
 * Copyright (C) 2008 Struct chen <piratebase@sina.com>
 * 	This program is free software; you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, 
 * or (at your option) any later version. 
 * 
 * 	This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 * See the GNU General Public License for more details. 
 * 	You should have received a copy of the GNU General Public License along with this program; 
 * if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package com.meidusa.amoeba.mysql.parser.sql;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import com.meidusa.amoeba.parser.dbobject.*;
import com.meidusa.amoeba.parser.expression.*;
import com.meidusa.amoeba.parser.function.*;
import com.meidusa.amoeba.parser.Parser;
import com.meidusa.amoeba.parser.statement.*;
import java.math.BigDecimal;
import java.util.Map;
import java.util.HashMap;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;
import java.sql.Connection;
import com.meidusa.amoeba.sqljep.function.Comparative;

/** Token Manager. */
public class MysqlParserTokenManager implements MysqlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x4000000000000L) != 0L)
            return 22;
         if ((active2 & 0x800000000000L) != 0L)
            return 19;
         if ((active0 & 0x3e0000000L) != 0L || (active1 & 0x800040000000L) != 0L)
         {
            jjmatchedKind = 139;
            return 85;
         }
         if ((active0 & 0xbfebfffc1f001fc0L) != 0L || (active1 & 0x81fc6b9f9ffe37ffL) != 0L || (active2 & 0x8013fc00000005L) != 0L)
         {
            jjmatchedKind = 139;
            return 96;
         }
         if ((active2 & 0x80000800000L) != 0L)
            return 15;
         if ((active0 & 0xfe0000L) != 0L || (active1 & 0x2002000004000L) != 0L || (active2 & 0x10000200000000L) != 0L)
         {
            jjmatchedKind = 139;
            return 72;
         }
         if ((active2 & 0x4000000L) != 0L)
            return 97;
         if ((active0 & 0x400000001e000L) != 0L || (active1 & 0x1a00040000000000L) != 0L || (active2 & 0x200000000018L) != 0L)
         {
            jjmatchedKind = 139;
            return 11;
         }
         if ((active1 & 0x4001000020018800L) != 0L || (active2 & 0x60000000000002L) != 0L)
         {
            jjmatchedKind = 139;
            return 4;
         }
         if ((active0 & 0x20L) != 0L || (active1 & 0x4000000000L) != 0L)
            return 98;
         return -1;
      case 1:
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 1;
            }
            return 84;
         }
         if ((active0 & 0xb6001bf000601200L) != 0L || (active1 & 0x200010040L) != 0L)
            return 96;
         if ((active0 & 0x9efe40dff91edc0L) != 0L || (active1 & 0x9bffebfdfffef7bfL) != 0L || (active2 & 0xf033fe0000001fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 1;
            }
            return 96;
         }
         if ((active1 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 1;
            }
            return 10;
         }
         if ((active1 & 0x4000000000000800L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 1;
            }
            return 3;
         }
         if ((active0 & 0xe0000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 1;
            }
            return 71;
         }
         return -1;
      case 2:
         if ((active1 & 0x4000000000000800L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 2;
            }
            return 2;
         }
         if ((active0 & 0x99e7e78d7bd9ec00L) != 0L || (active1 & 0x9bfb4fddffee95ffL) != 0L || (active2 & 0x7033fe0000001fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 2;
            }
            return 96;
         }
         if ((active0 & 0x81840840601c0L) != 0L || (active1 & 0x4a02200106200L) != 0L || (active2 & 0x80000000000000L) != 0L)
            return 96;
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 2;
            }
            return 83;
         }
         return -1;
      case 3:
         if ((active0 & 0x200000000L) != 0L)
            return 82;
         if ((active0 & 0x1063e0410381e000L) != 0L || (active1 & 0x60020432009418L) != 0L || (active2 & 0x18L) != 0L)
            return 96;
         if ((active2 & 0x3f000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 3;
            }
            return 31;
         }
         if ((active1 & 0x4000000000000800L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 3;
            }
            return 1;
         }
         if ((active0 & 0x89840f8c785a0c00L) != 0L || (active1 & 0x9b9bcddbcdee01e7L) != 0L || (active2 & 0x70300e00000007L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 3;
            }
            return 96;
         }
         return -1;
      case 4:
         if ((active1 & 0x4000000000000800L) != 0L)
            return 99;
         if ((active0 & 0x8040018460000000L) != 0L || (active1 & 0x101cc220001L) != 0L)
            return 96;
         if ((active0 & 0x9840e081a5b0c00L) != 0L || (active1 & 0x9b9bccda01cc01e6L) != 0L || (active2 & 0x40300a00000017L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return 96;
         }
         if ((active2 & 0x3f400000000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return 31;
         }
         return -1;
      case 5:
         if ((active0 & 0x1000c0000130c00L) != 0L || (active1 & 0x8393484a01800086L) != 0L || (active2 & 0x40100a00000013L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 5;
            }
            return 96;
         }
         if ((active1 & 0x8800000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active2 & 0x3f400000000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 5;
            }
            return 31;
         }
         if ((active0 & 0x88402081a480000L) != 0L || (active1 & 0x18000490004c0160L) != 0L || (active2 & 0x4L) != 0L)
            return 96;
         return -1;
      case 6:
         if ((active1 & 0x8800000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x200400000000000L) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1000c0000020c00L) != 0L || (active1 & 0x10004001800082L) != 0L)
            return 96;
         if ((active2 & 0x3f400000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 6;
            }
            return 31;
         }
         if ((active0 & 0x110000L) != 0L || (active1 & 0x8183080a00000004L) != 0L || (active2 & 0x40100a00000012L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 6;
            }
            return 96;
         }
         return -1;
      case 7:
         if ((active1 & 0x8800000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x200400000000000L) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x800000L) != 0L)
            return 31;
         if ((active0 & 0x100000L) != 0L || (active1 & 0x80200000004L) != 0L || (active2 & 0x200000002L) != 0L)
            return 96;
         if ((active0 & 0x10000L) != 0L || (active1 & 0x8183000800000000L) != 0L || (active2 & 0x40000800000010L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 7;
            }
            return 96;
         }
         if ((active2 & 0x3f400000000L) != 0L)
         {
            if (jjmatchedPos != 7)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 7;
            }
            return 31;
         }
         return -1;
      case 8:
         if ((active2 & 0x3fc00000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 8;
            }
            return 31;
         }
         if ((active1 & 0x8800000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x200400000000000L) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x181000800000000L) != 0L || (active2 & 0x40000200000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 8;
            }
            return 96;
         }
         if ((active0 & 0x10000L) != 0L || (active1 & 0x8002000000000000L) != 0L || (active2 & 0x10L) != 0L)
            return 96;
         return -1;
      case 9:
         if ((active1 & 0x8800000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x200400000000000L) != 0L || (active2 & 0x1L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active2 & 0x37c00000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 9;
            return 31;
         }
         if ((active1 & 0x181000800000000L) != 0L || (active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 9;
            return 96;
         }
         return -1;
      case 10:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active1 & 0x8800000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x200400000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active2 & 0x37c00000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 10;
            return 31;
         }
         if ((active1 & 0x800000000L) != 0L)
            return 96;
         if ((active1 & 0x101000000000000L) != 0L || (active2 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 10;
            return 96;
         }
         return -1;
      case 11:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x200400000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x100000000000000L) != 0L)
            return 96;
         if ((active2 & 0x37c00000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 11;
            return 31;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active1 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active2 & 0x27c00000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 12;
            return 31;
         }
         return -1;
      case 13:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active1 & 0x200000000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active2 & 0x27000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 13;
            return 31;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active1 & 0x80000000000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active2 & 0x25000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 14;
            return 31;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active2 & 0x25000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 15;
            return 31;
         }
         return -1;
      case 16:
         if ((active2 & 0x24000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 16;
            return 31;
         }
         if ((active1 & 0x8000000000000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 17;
            return 31;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 18;
            return 31;
         }
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 139;
               jjmatchedPos = 10;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000L);
      case 37:
         return jjStopAtPos(0, 179);
      case 38:
         return jjStopAtPos(0, 177);
      case 40:
         return jjStopAtPos(0, 152);
      case 41:
         return jjStopAtPos(0, 153);
      case 42:
         return jjStopAtPos(0, 170);
      case 43:
         return jjStopAtPos(0, 174);
      case 44:
         return jjStopAtPos(0, 148);
      case 45:
         return jjStartNfaWithStates_0(0, 175, 19);
      case 46:
         jjmatchedKind = 151;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000000000L);
      case 47:
         return jjStartNfaWithStates_0(0, 178, 22);
      case 59:
         return jjStopAtPos(0, 150);
      case 60:
         jjmatchedKind = 159;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x110000000L);
      case 61:
         return jjStopAtPos(0, 146);
      case 62:
         jjmatchedKind = 157;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000L);
      case 64:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 147);
      case 93:
         return jjStopAtPos(0, 149);
      case 96:
         return jjStartNfaWithStates_0(0, 154, 97);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3c0L, 0x200000000000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1c00L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000001e000L, 0x1a00040000000000L, 0x200000000018L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0xfe0000L, 0x2002000004000L, 0x10000200000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1f000000L, 0x80L, 0x4L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3e0000000L, 0x800040000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x1L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x20000000000L, 0x400000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1bf000000000L, 0x400200000000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x3c00000000000L, 0x80000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18800002000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x9e8000000000000L, 0x0L, 0x100000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0xb600000000000000L, 0x65L, 0x0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0xe0080100000018L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x118001000001700L, 0x3f800000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4001000020018800L, 0x60000000000002L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e0000L, 0x80000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000001c00000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e000000L, 0x0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L, 0x0L);
      case 124:
         jjmatchedKind = 176;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 171);
         break;
      case 61:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 158);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         break;
      case 62:
         if ((active2 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 156);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800006000L, active1, 0xc000006041c00800L, active2, 0x10100000000008L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4400200e0400L, active1, 0x1f4001400000318L, active2, 0L);
      case 70:
      case 102:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000L, active1, 0xe009000L, active2, 0x10L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000100000L, active1, 0x8990004000L, active2, 0x60000600000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x43000040L, active1, 0x200000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10001bc004000180L, active1, 0x200060000L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 80, 96);
         return jjMoveStringLiteralDfa2_0(active0, 0x80b200080400800L, active1, 0x8f0000002400L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80024L, active2, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x3f000000000L);
      case 82:
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8004000500800000L, active1, 0x1801000020000000L, active2, 0x200000000003L);
      case 83:
      case 115:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 37, 96);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0x200000300000L, active2, 0x80000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000L, active2, 0x800000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e0000200000000L, active1, 0x2000000000003L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0x80L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(1, 12, 96);
         break;
      case 124:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000L, active1, 0x69000400000018L, active2, 0x11L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000800L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 109, 96);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000008020000L, active1, 0x1800000000L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 96);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 96);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 77, 96);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000008000000000L, active1, 0x80000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000L, active1, 0x1800000006008002L, active2, 0x80000000000004L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x40L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L, active2, 0x400000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200010000000L, active1, 0x200000008260000L, active2, 0x2L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 96);
         return jjMoveStringLiteralDfa3_0(active0, 0x1060000200080000L, active1, 0x80040400100L, active2, 0x3f000000008L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000000000L, active1, 0x44080000400L, active2, 0x60000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x418000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000540800800L, active1, 0x1000L, active2, 0x200000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x82000000000080L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8100800001800000L, active2, 0x800000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20003106000L, active1, 0x10000000000000L, active2, 0x200000000L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 51, 96);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 96);
         return jjMoveStringLiteralDfa3_0(active0, 0x84020000400L, active1, 0x210000025L, active2, 0x10100000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L, active1, 0x20020000000L, active2, 0L);
      case 86:
      case 118:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 78, 96);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 96);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 101, 96);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 114, 96);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80000000000000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x3f000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x804000048000000L, active1, 0x1800000000080000L, active2, 0x800000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000400000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x800001800000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x60000000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 96);
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 96);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 96);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 96);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 139, 96);
         else if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x81000b8002080000L, active1, 0x280000200000101L, active2, 0x40000000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 72:
      case 104:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 96);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000L, active2, 0x400000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x800020000L, active1, 0x8100000080000024L, active2, 0L);
      case 75:
      case 107:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 96);
         break;
      case 76:
      case 108:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 82);
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 96);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 131, 96);
         return jjMoveStringLiteralDfa4_0(active0, 0x40040000000800L, active1, 0x4002080008000880L, active2, 0L);
      case 77:
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 96);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 96);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 96);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 96);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000200000L, active2, 0x5L);
      case 79:
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 96);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x405000020000L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 96);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 96);
         break;
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 96);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 105, 96);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0x8000804000002L, active2, 0x10L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0x10000040000040L, active2, 0x200000000000L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 96);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 46, 96);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0x10000000000L, active2, 0x200000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x8000400000L, active2, 0x100000000000L);
      case 87:
      case 119:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 76, 96);
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 60, 96);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x60000000000000L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x400000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000010000L, active1, 0x8180000000000080L, active2, 0x10L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000L, active2, 0x6000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100L, active2, 0x28000000000L);
      case 69:
      case 101:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 96);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 91, 96);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 96);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000c00L, active1, 0x4000804000400040L, active2, 0L);
      case 71:
      case 103:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 96);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0L, active2, 0x2L);
      case 72:
      case 104:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 96);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 96);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1800000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000002100000L, active1, 0x12040000000000L, active2, 0x80000a00000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0x4L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 96);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0x200001000000000L, active2, 0x10000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000020L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 96);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 96);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 96);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 96);
         return jjMoveStringLiteralDfa5_0(active0, 0x100020000000000L, active1, 0x400200000000L, active2, 0x100000000000L);
      case 83:
      case 115:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 96);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 139, 96);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000L, active2, 0x40001000000000L);
      case 84:
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 96);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 96);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 96);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000010080000L, active1, 0x1808008000080000L, active2, 0x5L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 88:
      case 120:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 96);
         break;
      case 89:
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4008800000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20800L, active1, 0x1080001800000L, active2, 0x128000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000004000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000010000L, active1, 0x22000000000000L, active2, 0x10L);
      case 68:
      case 100:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 100, 96);
         break;
      case 69:
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 96);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 96);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 96);
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 96);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 96);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 96);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000400L, active1, 0x1800400000000000L, active2, 0x2L);
      case 70:
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 96);
         break;
      case 71:
      case 103:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 96);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x800000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0x84L, active2, 0x2000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 78:
      case 110:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 96);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0x2L, active2, 0x80000200000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000000L, active2, 0x10000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x400000000L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 96);
         break;
      case 83:
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 96);
         else if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 96);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 130, 96);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000L, active2, 0x1L);
      case 84:
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 96);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 96);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 70, 96);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 96);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 96);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x280000000000000L, active2, 0x40000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000000L, active2, 0x4000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1a00400000000000L, active2, 0x1L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10000000000L);
      case 65:
      case 97:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 102, 96);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x82000200000000L, active2, 0x40001000000000L);
      case 67:
      case 99:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 96);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0x1080000000000L, active2, 0x8200000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 96);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x800000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100800000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 96);
         else if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 139, 96);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000000L, active2, 0x20000000000L);
      case 78:
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 96);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(6, 11, 96);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 96);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 116, 96);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 79:
      case 111:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 96);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 96);
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L, active2, 0x400000002L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0x8000000000000L, active2, 0x10L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 31);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x2000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x240000800000000L, active2, 0x30000000000L);
      case 69:
      case 101:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 96);
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0x8000000000000000L, active2, 0x80000000000010L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4000000001L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000L, active2, 0x400000000L);
      case 75:
      case 107:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 107, 96);
         break;
      case 76:
      case 108:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 97, 96);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000000L, active2, 0x40000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 83:
      case 115:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 129, 96);
         break;
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4803000000000000L, active2, 0xa00000000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x20800000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4908000000000000L, active2, 0x10000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 113, 96);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 139, 31);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x80000000000000L, active2, 0x1000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000800000000L, active2, 0x400000001L);
      case 80:
      case 112:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 139, 96);
         break;
      case 82:
      case 114:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x2200000010L);
      case 83:
      case 115:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 127, 96);
         break;
      case 88:
      case 120:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStopAtPos(8, 183);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x10L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x1000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa10_0(active1, 0x200000000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active1, 0x900000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x10000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa10_0(active1, 0x400000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active1, 0x80800000000000L, active2, 0x2000000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x20000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active1, 0x20000000000000L, active2, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x800000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active1, 0x40000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa10_0(active1, 0x8000800000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0x1001000000000000L, active2, 0x200000000L);
      case 82:
      case 114:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(9, 128);
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x4400000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active1, 0x80000000000000L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x4000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active1, 0x1000000000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 99, 96);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x400000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x10000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x400000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active1, 0x900000000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active1, 0x40000000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active1, 0x1000000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x20800000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active1, 0x200000000000000L, active2, 0x1000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active1, 0x8000000000000L, active2, 0x2000000010L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa11_0(active1, 0x20000000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active1, 0x4000000000000000L, active2, 0L);
      case 87:
      case 119:
         if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(10, 139, 96);
         break;
      case 88:
      case 120:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(10, 111);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active1, 0x1000000000000L, active2, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active1, 0x8000000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 120, 96);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(11, 123);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 139, 31);
         return jjMoveStringLiteralDfa12_0(active1, 0x1000000000000000L, active2, 0x1000000010L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active1, 0x40000000000000L, active2, 0x800000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active1, 0x80000000000000L, active2, 0x4000000000L);
      case 83:
      case 115:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(11, 126);
         return jjMoveStringLiteralDfa12_0(active1, 0x200000000000000L, active2, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active1, 0x20000000000000L, active2, 0x400000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active1, 0L, active2, 0x22000000000L);
      case 88:
      case 120:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(11, 110);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa13_0(active1, 0x8000000000000L, active2, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa13_0(active1, 0x1000000000000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active1, 0x2a0000000000000L, active2, 0x4000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active1, 0x1000000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x2000000000L);
      case 78:
      case 110:
         if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(12, 139, 31);
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x20000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa13_0(active1, 0L, active2, 0x1000000000L);
      case 84:
      case 116:
         if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(12, 132);
         return jjMoveStringLiteralDfa13_0(active1, 0x40000000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(12, 139, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0x80000000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(13, 117);
         return jjMoveStringLiteralDfa14_0(active1, 0L, active2, 0x20000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active1, 0x1000000000000L, active2, 0x4000000000L);
      case 84:
      case 116:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(13, 121);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 139, 31);
         return jjMoveStringLiteralDfa14_0(active1, 0x48000000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa14_0(active1, 0x1000000000000000L, active2, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x20000000000L);
      case 68:
      case 100:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(14, 119);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_0(active1, 0x40000000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active1, 0x8000000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x1000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa15_0(active1, 0x1000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active1, 0x1000000000000000L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa15_0(active1, 0L, active2, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, active2);
      return 15;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(15, 118);
         break;
      case 69:
      case 101:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(15, 124);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active1, 0x1000000000000L, active2, 0x4000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa16_0(active1, 0x8000000000000L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa16_0(active1, 0L, active2, 0x20000000000L);
      case 84:
      case 116:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 139, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(14, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, active2);
      return 16;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa17_0(active1, 0x1000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(16, 115);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa17_0(active1, 0L, active2, 0x20000000000L);
      case 84:
      case 116:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 139, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(15, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, active2);
      return 17;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa18_0(active1, 0x1000000000000L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa18_0(active1, 0L, active2, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(16, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, active2);
      return 18;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa19_0(active1, 0x1000000000000L, active2, 0L);
      case 83:
      case 115:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 139, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(17, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa20_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(18, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa21_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(19, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, active1, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa22_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(20, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, active1, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa23_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(21, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, active1, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa24_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(22, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, active1, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 86:
      case 118:
         return jjMoveStringLiteralDfa25_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(23, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, active1, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa26_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa26_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(24, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, active1, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(26, 112);
         break;
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec3 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec6 = {
   0x3ff00000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x3ff0000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec10 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec11 = {
   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x12000000007fffffL
};
static final long[] jjbitVec12 = {
   0x0L, 0x0L, 0x420040000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec13 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xfc3fffffffffffffL
};
static final long[] jjbitVec14 = {
   0xffffffL, 0xffffffffffff0000L, 0xf9ff01ffffffffffL, 0x1f00030003L
};
static final long[] jjbitVec15 = {
   0x0L, 0x400000000000000L, 0xfffffffbffffd740L, 0xffffffc7f7fffL
};
static final long[] jjbitVec16 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
};
static final long[] jjbitVec17 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xffL, 0x707ffffff0000L
};
static final long[] jjbitVec18 = {
   0x7fffffe00000000L, 0xfffe0000000007ffL, 0x7cffffffffffffffL, 0x60002f7fffL
};
static final long[] jjbitVec19 = {
   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec20 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
};
static final long[] jjbitVec21 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec22 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec23 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec24 = {
   0xd7ffffffffffeL, 0x7fL, 0x200d6caefef02596L, 0x3000005fL
};
static final long[] jjbitVec25 = {
   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec26 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0xffffffff83ffffffL, 0xffffff07ffffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec28 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec29 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec30 = {
   0x0L, 0x8000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec31 = {
   0x1fbfd503f2ffc84L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec32 = {
   0x3e000000000020L, 0xfffffffffffffffeL, 0xfffffffe781fffffL, 0x77ffffffffffffffL
};
static final long[] jjbitVec33 = {
   0xfffe1fffffffffe0L, 0xffffffffffffffffL, 0x7fffL, 0x0L
};
static final long[] jjbitVec34 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec35 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec36 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x5f7ffdff80f8007fL, 0xffffffffffffffdbL, 0x3ffffffffffffL, 0xfffffffffff80000L
};
static final long[] jjbitVec38 = {
   0x3fffffffffffffffL, 0xffffffffffff0000L, 0xfffffffffffcffffL, 0xfff0000000000ffL
};
static final long[] jjbitVec39 = {
   0x0L, 0xffd7000000000000L, 0xffffffffffffffffL, 0x1fffffffffffffffL
};
static final long[] jjbitVec40 = {
   0x7fffffe00000000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
static final long[] jjbitVec41 = {
   0x7fffffe00000000L, 0xfffe03ff000007ffL, 0x7cffffffffffffffL, 0x3ff0060002f7fffL
};
static final long[] jjbitVec42 = {
   0x23ffffffffffffe0L, 0xffc3ff000000L, 0x3c5fdfffff99fe0L, 0x3ffc3b0000000L
};
static final long[] jjbitVec43 = {
   0x36dfdfffff987e0L, 0x1cffc05e000000L, 0x23edfdfffffbafe0L, 0xffc100000000L
};
static final long[] jjbitVec44 = {
   0x23cdfdfffff99fe0L, 0xffc3b0000000L, 0x3bfc718d63dc7e0L, 0xff8000000000L
};
static final long[] jjbitVec45 = {
   0x3effdfffffddfe0L, 0xffc300000000L, 0x3effdfffffddfe0L, 0xffc340000000L
};
static final long[] jjbitVec46 = {
   0x3fffdfffffddfe0L, 0xffc300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec47 = {
   0xd7ffffffffffeL, 0x3ff007fL, 0x200d6caefef02596L, 0x33ff005fL
};
static final long[] jjbitVec48 = {
   0x3ff00000000L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec49 = {
   0x7fffffe03ff0000L, 0xffffffc007fffffeL, 0x7fffffffffffffffL, 0x1cfcfcfcL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 96;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 72:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 1:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 11:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 71:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 96:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 83:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 4:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 2:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 99:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(42, 43);
                  else if (curChar == 39)
                     jjCheckNAddStates(4, 6);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 46)
                     jjCheckNAdd(15);
                  else if (curChar == 63)
                  {
                     if (kind > 145)
                        kind = 145;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(13);
                  }
                  break;
               case 85:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 82:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  else if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 91;
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 10:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 84:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 46)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar != 45)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjCheckNAdd(20);
                  break;
               case 21:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 23:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 42)
                     jjCheckNAddStates(7, 9);
                  break;
               case 25:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(26, 24);
                  break;
               case 26:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(26, 24);
                  break;
               case 27:
                  if (curChar == 47 && kind > 138)
                     kind = 138;
                  break;
               case 28:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 35:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjAddStates(10, 13);
                  break;
               case 37:
                  if (curChar == 39)
                     jjCheckNAddStates(4, 6);
                  break;
               case 38:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 40:
                  if (curChar == 39 && kind > 142)
                     kind = 142;
                  break;
               case 41:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 42:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 34 && kind > 143)
                     kind = 143;
                  break;
               case 47:
                  if ((0x3ff201000000000L & l) != 0L)
                     jjAddStates(14, 15);
                  break;
               case 49:
                  if (curChar == 63 && kind > 145)
                     kind = 145;
                  break;
               case 50:
                  if (curChar == 40)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(51, 52);
                  break;
               case 52:
                  if (curChar == 41 && kind > 145)
                     kind = 145;
                  break;
               case 53:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 56:
                  if (curChar != 46)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 63:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 134)
                     kind = 134;
                  jjCheckNAdd(64);
                  break;
               case 92:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 72:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(0);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 71:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 96:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 99:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if ((0x8000000080000L & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                  }
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  else if (curChar == 96)
                     jjCheckNAddTwoStates(45, 46);
                  else if (curChar == 95)
                     jjCheckNAddTwoStates(33, 34);
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(29, 30);
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(16, 17);
                  else if ((0x1000000010L & l) != 0L)
                     jjAddStates(18, 19);
                  else if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 97:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 82:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 98:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 84:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 0:
                  if ((0x8000000080000L & l) != 0L && kind > 122)
                     kind = 122;
                  break;
               case 6:
                  if ((0x8000000080000L & l) != 0L && kind > 125)
                     kind = 125;
                  break;
               case 7:
               case 86:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 8:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 12:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(26, 27);
                  break;
               case 20:
                  if (kind > 137)
                     kind = 137;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
               case 26:
                  jjCheckNAddTwoStates(26, 24);
                  break;
               case 29:
                  if (curChar == 64)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 33:
                  if (curChar == 64)
                     jjCheckNAddTwoStates(33, 34);
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(28, 32);
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 36:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               case 38:
                  jjAddStates(4, 6);
                  break;
               case 39:
                  if (curChar == 92)
                     jjCheckNAdd(37);
                  break;
               case 42:
                  jjAddStates(33, 34);
                  break;
               case 44:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 45:
                  if (curChar == 64)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(23, 25);
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 48:
                  if (curChar == 96 && kind > 144)
                     kind = 144;
                  break;
               case 58:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(35, 36);
                  break;
               case 62:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(37, 38);
                  break;
               case 65:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(18, 19);
                  break;
               case 66:
                  if ((0x2000000020L & l) != 0L && kind > 108)
                     kind = 108;
                  break;
               case 67:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 73:
                  if ((0x800000008L & l) != 0L && kind > 108)
                     kind = 108;
                  break;
               case 74:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 77:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(0);
                  break;
               case 78:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 87:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 93:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 72:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 1:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 11:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 71:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 96:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 83:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 4:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 2:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 99:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(13);
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  break;
               case 85:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 97:
               case 46:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(23, 25);
                  break;
               case 82:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 10:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 98:
               case 30:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 84:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAddTwoStates(30, 31);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 139)
                        kind = 139;
                     jjCheckNAdd(31);
                  }
                  break;
               case 13:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(13);
                  break;
               case 20:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 137)
                     kind = 137;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
               case 26:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(26, 24);
                  break;
               case 31:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 139)
                     kind = 139;
                  jjCheckNAdd(31);
                  break;
               case 34:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(28, 32);
                  break;
               case 35:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(10, 13);
                  break;
               case 38:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(4, 6);
                  break;
               case 42:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(33, 34);
                  break;
               case 47:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(47, 48);
                  break;
               case 51:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(39, 40);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 96 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   55, 56, 61, 62, 38, 39, 40, 24, 25, 27, 32, 35, 36, 37, 47, 48, 
   85, 95, 72, 75, 32, 36, 37, 46, 47, 48, 17, 18, 32, 34, 35, 36, 
   37, 42, 43, 59, 60, 63, 64, 51, 52, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            if ((jjbitVec1[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec10[i2] & l2) != 0L);
      default : 
         if ((jjbitVec8[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec40[i2] & l2) != 0L);
      default : 
         if ((jjbitVec11[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 250:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 251:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec49[i2] & l2) != 0L);
      default : 
         if ((jjbitVec11[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\100", null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\41", null, null, 
null, null, null, null, null, null, null, "\174\174", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\75", "\133", "\54", "\135", "\73", 
"\56", "\50", "\51", "\140", "\41\75", "\74\76", "\76", "\76\75", "\74", "\74\75", 
null, null, null, null, null, null, null, null, null, "\52", "\56\52", null, null, 
"\53", "\55", "\174", "\46", "\57", "\45", null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0xffffffffffc87fL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x600L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0x600L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[96];
private final int[] jjstateSet = new int[192];
protected char curChar;
/** Constructor. */
public MysqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public MysqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 96; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
